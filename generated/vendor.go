package main

import (
  "github.com/labstack/echo"
  "net/http"
)

///////////////////////////////////////////////////////////////////////
//       Generated By codegen from SQL table vendor
//        Vendor REST Functions

type DBvendor struct {
  ID  int  `db:"id"`
  Name  string  `db:"name"`
  Descr  string  `db:"descr"`
  Address  string  `db:"address"`
  Phone  string  `db:"phone"`
  Fax  string  `db:"fax"`
  ContactName  string  `db:"contact_name"`
  ContactEmail  string  `db:"contact_email"`
  OrdersEmail  string  `db:"orders_email"`
  Rating  string  `db:"rating"`
  Notes  string  `db:"notes"`
}
   
func queryVendor(c *echo.Context) error {

  _, err := securityCheck(c, "readVendor")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  var records []*DBvendor
  err = DB.
    Select("id","name","descr","address","phone","fax","contact_name","contact_email","orders_email","rating","notes").
    From("vendor").
    QueryStructs(&records)

  if err != nil {
    return c.String(http.StatusNoContent, err.Error())
  }
  return c.JSON(http.StatusOK, records)
}

func getVendor(c *echo.Context) error {

  _, err := securityCheck(c, "readVendor")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  id := getID(c)
  var record DBvendor
  err = DB.
    Select("id","name","descr","address","phone","fax","contact_name","contact_email","orders_email","rating","notes").
    From("vendor").
    Where("id = $1",id).
    QueryStruct(&record)

  if err != nil {
    return c.String(http.StatusNoContent, err.Error())
  }
  return c.JSON(http.StatusOK, record)
}
   
func newVendor(c *echo.Context) error {

  claim, err := securityCheck(c, "writeVendor")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  record := &DBvendor{}
  if err := c.Bind(record); err != nil {
    return c.String(http.StatusBadRequest, err.Error())
  }

  err = DB.InsertInto("vendor").
    Whitelist("id","name","descr","address","phone","fax","contact_name","contact_email","orders_email","rating","notes").
    Record(record).
    Returning("id").
    QueryScalar(&record.ID)

  if err != nil {
    return c.String(http.StatusInternalServerError, err.Error())
  }

  // TODO - edit and comment out the syslog line below
  // Now log the creation of the new site
  // sysLog(1, "Vendor", "X", record.ID, "Vendor Created", c, claim)

  // insert into DB, fill in the ID of the new user
  return c.JSON(http.StatusCreated, record)
}

func saveVendor(c *echo.Context) error {

  claim, err := securityCheck(c, "writeVendor")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  record := &DBvendor{}
  if err = c.Bind(record); err != nil {
    return c.String(http.StatusBadRequest, err.Error())
  }

  id := getID(c)
  _, err = DB.Update("vendor").
    SetWhitelist(record, "id","name","descr","address","phone","fax","contact_name","contact_email","orders_email","rating","notes").
    Where("id = $1", id).
    Exec()

  if err != nil {
    return c.String(http.StatusInternalServerError, err.Error())
  }

  // TODO - update this syslog record with the correct fields
  // sysLog(1, "Vendor", "T", id, "Updated", c, claim)
  return c.JSON(http.StatusOK, id)
}

    
func deleteVendor(c *echo.Context) error {

  claim, err := securityCheck(c, "writeVendor")
  if err != nil {
    return c.String(http.StatusUnauthorized, err.Error())
  }

  id := getID(c)
  _, err = DB.
    DeleteFrom("vendor").
    Where("id = $1", id).
    Exec()

  if err != nil {
    return c.String(http.StatusBadRequest, err.Error())
  }

  // TODO delete the part references
  // DB.DeleteFrom("linked_table").Where("vendor_id=$1", id).Exec()

  // TODO update this syslog interface
  // sysLog(3, "Vendor", "T", id, "Vendor Deleted", c, claim)

  return c.String(http.StatusOK, "Component Deleted")
}
